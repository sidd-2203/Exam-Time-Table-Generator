/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.exammanagement;

import Utilities.CreateConnection;
import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.poifs.crypt.dsig.services.TSPTimeStampService;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author siddh
 */
public class SeatingArrangementGenerated extends javax.swing.JFrame {

    /**
     * Creates new form SeatingArrangementGenerated
     */
    String firstYearTableNameString = "firstyearstudents";
    String secondYearTableNameString = "secondyearstudents";
    String thirdYearTableNameString = "thirdyearstudents";
    String fourthYearTableNameString = "fourthyearstudents";

    String firstYearSubject = "firstyearSubject";
    String secondYearTableSubject = "secondyearSubject";
    String thirdYearTableSubject = "thirdyearSubject";
    String fourthYearTableSubject = "fourthyearSubject";
    static String semsString;

    private ArrayList<String> getAllData = new ArrayList<>();

    String LtTableNameString = "LTSeating";
    String allLtsNameString = "AllLectureHalls";

    public SeatingArrangementGenerated() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(47, 79, 79));
        setResizable(false);

        jButton1.setBackground(new java.awt.Color(0, 128, 128));
        jButton1.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Time table");
        jButton1.setOpaque(true);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 128, 128));
        jButton2.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Seating Arrangement");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton2MouseExited(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 128, 128));
        jButton3.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Invigilation");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton3MouseExited(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton4.setText("Download");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Exit");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton6))
                .addGap(0, 30, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("Exam Management");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        int rows = jTable1.getRowCount();
        int cols = jTable1.getColumnCount();
        System.out.println(rows + " " + cols);

        String arr[][] = new String[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (jTable1.getValueAt(i, j) == null) {
                    arr[i][j] = "";
                } else {
                    arr[i][j] = jTable1.getValueAt(i, j).toString();
                }
            }
        }
        saveToExcel(arr);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CreateTimeTable createTimeTable = new CreateTimeTable();
        createTimeTable.main(new String[]{semsString});
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        InvigilationListCreated invigilationListCreated = new InvigilationListCreated();
        invigilationListCreated.main(new String[]{});
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered

        jButton1.setToolTipText("Time Table");
        jButton1.setBackground(new Color(24, 154, 180));
        jButton1.setForeground(Color.black);

    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        // TODO add your handling code here:
//        jButton2.setToolTipText("Time Table");
        jButton1.setBackground(new Color(0, 128, 128));
        jButton1.setForeground(Color.WHITE);
    }//GEN-LAST:event_jButton1MouseExited

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        // TODO add your handling code here:
        jButton2.setToolTipText("Seating Arrangement");
        jButton2.setBackground(new Color(24, 154, 180));
        jButton2.setForeground(Color.black);
    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited
        // TODO add your handling code here:
        jButton2.setBackground(new Color(0, 128, 128));
        jButton2.setForeground(Color.WHITE);
    }//GEN-LAST:event_jButton2MouseExited

    private void jButton3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseEntered
        // TODO add your handling code here:
        jButton3.setToolTipText("Invigilation");
        jButton3.setBackground(new Color(24, 154, 180));
        jButton3.setForeground(Color.black);
    }//GEN-LAST:event_jButton3MouseEntered

    private void jButton3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseExited
        // TODO add your handling code here:
        jButton3.setBackground(new Color(0, 128, 128));
        jButton3.setForeground(Color.WHITE);
    }//GEN-LAST:event_jButton3MouseExited

    public void saveToExcel(String arr[][]) {
        int rows = jTable1.getRowCount();
        int cols = jTable1.getColumnCount();

        XSSFWorkbook workbook = new XSSFWorkbook();

        // spreadsheet object
        XSSFSheet spreadsheet = workbook.createSheet(" Seating Arrangement");

        // creating a row object
        XSSFRow row;
        // This data needs to be written (Object[])
        Map<String, Object[]> studentData = new TreeMap<String, Object[]>();

        // End sem
        studentData.put("1", new Object[]{"Roll numbers", "Seats"});
        for (int i = 0; i < rows; i++) {
            studentData.put(String.valueOf(i + 2), arr[i]);
        }
        Set<String> keyid = studentData.keySet();

        int rowid = 0;

        // writing the data into the sheets...
        for (String key : keyid) {
            row = spreadsheet.createRow(rowid++);
            Object[] objectArr = studentData.get(key);
            int cellid = 0;

            for (Object obj : objectArr) {
                Cell cell = row.createCell(cellid++);
                cell.setCellValue((String) obj);
            }
        }
        try (
                // .xlsx is the format for Excel Sheets...
                // writing the workbook into the file...
                 FileOutputStream out = new FileOutputStream(new File("E:/ExamManagement/SeatingArrangement.xlsx"))) {
            workbook.write(out);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SeatingArrangementGenerated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SeatingArrangementGenerated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SeatingArrangementGenerated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SeatingArrangementGenerated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SeatingArrangementGenerated seatingArrangementGenerated = new SeatingArrangementGenerated();
                seatingArrangementGenerated.setVisible(true);

                seatingArrangementGenerated.getContentPane().setBackground(new Color(47, 79, 79));
                seatingArrangementGenerated.getAllSeats();
                seatingArrangementGenerated.AddtoTable(args[0]);
                semsString = args[1];

            }
        });
    }

    public void getAllSeats() {
        Connection connection = CreateConnection.getInstance();
        Statement statement;

        try {
            statement = connection.createStatement();
            ResultSet rs = statement.executeQuery("Select * from " + allLtsNameString + ";");
            ArrayList<String> ltsNameArrayList = new ArrayList<>();

            while (rs.next()) {
                if (!rs.getString(1).equals("NULL")) {
                    System.out.println(rs.getString(1));
                    ltsNameArrayList.add(rs.getString(1));
                }
            }

            for (int i = 0; i < ltsNameArrayList.size(); i++) {
                String ltNameString = ltsNameArrayList.get(i);
                String query = "Select " + ltNameString + " from " + LtTableNameString + ";";
                ResultSet rs1 = statement.executeQuery(query);
                System.out.println(query);
                while (rs1.next()) {
                    if (rs1.getString(1) != null) {
                        getAllData.add(ltNameString + "-" + rs1.getString(1));
                    }
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(AddDocuments.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void AddtoTable(String subject) {

        ArrayList<String> studentsArrayList = new ArrayList<>();

        if (subject.indexOf('/') == -1) {
            String tableNameString = searchInTable(subject);
            ArrayList<String> temp = getStudents(subject, tableNameString);
            studentsArrayList.addAll(temp);

        } else {
            int indexString = subject.indexOf('/');
            String sub1 = subject.substring(0, indexString);
            String sub2 = subject.substring(indexString + 1);
            System.out.println(sub1 + " " + sub2);

            String tableString1 = searchInTable(sub1);
            String tableString2 = searchInTable(sub2);
            System.out.println(tableString1 + " " + tableString2);
            studentsArrayList.addAll(getStudents(sub1, tableString1));
            studentsArrayList.addAll(getStudents(sub2, tableString2));
        }
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Roll numbers", studentsArrayList.toArray());
        ArrayList<String> seatsList = new ArrayList<>();
        if (getAllData.size() < studentsArrayList.size()) {
            JOptionPane.showMessageDialog(null, "Seats present are not enough");
            System.out.println(studentsArrayList.size() + " " + seatsList.size());
            this.dispose();
        }
        for (int i = 0; i < studentsArrayList.size(); i++) {
            seatsList.add(getAllData.get(i));
        }

        model.addColumn("Seats", seatsList.toArray());
        jTable1.setModel(model);
    }

    public String searchInTable(String subject) {

        Connection connection = CreateConnection.getInstance();
        Statement statement;

        try {
            statement = connection.createStatement();
            ResultSet rs = statement.executeQuery("Select * from " + firstYearSubject + ";");
            while (rs.next()) {
                if (rs.getString(1).equalsIgnoreCase(subject)) {
                    return firstYearTableNameString;
                }
            }
            rs = statement.executeQuery("Select * from " + secondYearTableSubject + ";");
            while (rs.next()) {
                if (rs.getString(1).equalsIgnoreCase(subject)) {
                    return secondYearTableNameString;
                }
            }
            rs = statement.executeQuery("Select * from " + thirdYearTableSubject + ";");
            while (rs.next()) {
                if (rs.getString(1).equalsIgnoreCase(subject)) {
                    return thirdYearTableNameString;
                }

            }
            rs = statement.executeQuery("Select * from " + fourthYearTableSubject + ";");
            while (rs.next()) {
                if (rs.getString(1).equalsIgnoreCase(subject)) {
                    return fourthYearTableNameString;
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(AddDocuments.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }

    public ArrayList<String> getStudents(String subjectString, String tableString) {
        Connection connection = CreateConnection.getInstance();
        Statement statement;

        try {
            statement = connection.createStatement();
            ResultSet rs = statement.executeQuery("Select " + subjectString + " from " + tableString + ";");
            ArrayList<String> studentsList = new ArrayList<>();

            while (rs.next()) {
                if (rs.getString(1) != null) {
                    studentsList.add(rs.getString(1));
                    System.out.println(rs.getString(1));
                }
            }

            return studentsList;

        } catch (SQLException ex) {
            Logger.getLogger(AddDocuments.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
