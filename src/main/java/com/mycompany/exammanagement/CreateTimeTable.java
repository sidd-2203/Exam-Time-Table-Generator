
/*

 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.exammanagement;

import Utilities.CreateConnection;
import Utilities.SendMail;
import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author siddh
 */
public class CreateTimeTable extends javax.swing.JFrame {

    String firstYearTableNameString = "firstyearstudents";
    String secondYearTableNameString = "secondyearstudents";
    String thirdYearTableNameString = "thirdyearstudents";
    String fourthYearTableNameString = "fourthyearstudents";

    String firstYearSubject = "firstyearSubject";
    String secondYearTableSubject = "secondyearSubject";
    String thirdYearTableSubject = "thirdyearSubject";
    String fourthYearTableSubject = "fourthyearSubject";
    boolean semester;

    /**
     * Creates new form CreateTimeTable
     */
    public CreateTimeTable() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        request = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        btncreateTimeTable = new javax.swing.JButton();
        btnGenerateInvigilation = new javax.swing.JButton();
        btnGenerateSeating = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(47, 79, 79));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(0, 128, 128));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        jTable1.setGridColor(new java.awt.Color(0, 128, 128));
        jTable1.setOpaque(false);
        jTable1.setSelectionBackground(new java.awt.Color(0, 128, 128));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 310, 309));

        request.setText("Request Approval from DOAA");
        request.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestActionPerformed(evt);
            }
        });
        getContentPane().add(request, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 370, 200, 33));

        jButton5.setText("Download");
        jButton5.setBorderPainted(false);
        jButton5.setPreferredSize(new java.awt.Dimension(503, 473));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 370, 135, 33));

        jButton6.setText("EXIT");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 420, 88, -1));

        btncreateTimeTable.setBackground(new java.awt.Color(0, 128, 128));
        btncreateTimeTable.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        btncreateTimeTable.setForeground(new java.awt.Color(255, 255, 255));
        btncreateTimeTable.setText("Create Time table");
        btncreateTimeTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 3, true));
        btncreateTimeTable.setOpaque(true);
        btncreateTimeTable.setRolloverEnabled(false);
        btncreateTimeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btncreateTimeTableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btncreateTimeTableMouseExited(evt);
            }
        });
        btncreateTimeTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncreateTimeTableActionPerformed(evt);
            }
        });
        getContentPane().add(btncreateTimeTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 117, 117));

        btnGenerateInvigilation.setBackground(new java.awt.Color(0, 128, 128));
        btnGenerateInvigilation.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        btnGenerateInvigilation.setForeground(new java.awt.Color(255, 255, 255));
        btnGenerateInvigilation.setText("Generate Invigilation List");
        btnGenerateInvigilation.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 255), 3, true));
        btnGenerateInvigilation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnGenerateInvigilationMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnGenerateInvigilationMouseExited(evt);
            }
        });
        btnGenerateInvigilation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateInvigilationActionPerformed(evt);
            }
        });
        getContentPane().add(btnGenerateInvigilation, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 117, 117));

        btnGenerateSeating.setBackground(new java.awt.Color(0, 128, 128));
        btnGenerateSeating.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        btnGenerateSeating.setForeground(new java.awt.Color(255, 255, 255));
        btnGenerateSeating.setText("Generate Seating Arrangement");
        btnGenerateSeating.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 255), 3, true));
        btnGenerateSeating.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnGenerateSeatingMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnGenerateSeatingMouseExited(evt);
            }
        });
        btnGenerateSeating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateSeatingActionPerformed(evt);
            }
        });
        getContentPane().add(btnGenerateSeating, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 117, 117));

        jButton1.setBackground(new java.awt.Color(47, 79, 79));
        jButton1.setForeground(new java.awt.Color(47, 79, 79));
        jButton1.setLabel("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 500, 0, 0));

        getAccessibleContext().setAccessibleName("Exam Management");
        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        int rows = jTable1.getRowCount();
        int cols = jTable1.getColumnCount();
        System.out.println(rows+" " +cols);
         
        String arr[][] = new String[rows][cols];
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if(jTable1.getValueAt(i, j)==null){
                        arr[i][j]="";
                }else 
                    arr[i][j]=jTable1.getValueAt(i, j).toString();
            }
        }
         for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.print(arr[i][j]+" ");
            }
             System.out.println("");
         }
        saveToExcel(arr);
        request.setEnabled(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
      this.dispose();   
    }//GEN-LAST:event_jButton6ActionPerformed

    private void requestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestActionPerformed
        SendMail sendmail = new SendMail();
//        sendmail.sendEmail();
        sendmail.sendAttach();
    }//GEN-LAST:event_requestActionPerformed

    private void btncreateTimeTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btncreateTimeTableMouseEntered
        btncreateTimeTable.setBackground(new Color(24, 154, 180));
        btncreateTimeTable.setForeground(Color.black);
    }//GEN-LAST:event_btncreateTimeTableMouseEntered

    private void btncreateTimeTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btncreateTimeTableMouseExited
        // TODO add your handling code here:
        btncreateTimeTable.setBackground(new Color(0, 128, 128));
        btncreateTimeTable.setForeground(Color.WHITE);

    }//GEN-LAST:event_btncreateTimeTableMouseExited

    private void btncreateTimeTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncreateTimeTableActionPerformed
            
    }//GEN-LAST:event_btncreateTimeTableActionPerformed
  
   
    private void btnGenerateInvigilationMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGenerateInvigilationMouseEntered
        btnGenerateInvigilation.setToolTipText("Generate Invigilation List");
        
        btnGenerateInvigilation.setBackground(new Color(24, 154, 180));
        btnGenerateInvigilation.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnGenerateInvigilationMouseEntered

    private void btnGenerateInvigilationMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGenerateInvigilationMouseExited
        // TODO add your ha
        btnGenerateInvigilation.setBackground(new Color(0, 128, 128));
        btnGenerateInvigilation.setForeground(Color.WHITE);

    }//GEN-LAST:event_btnGenerateInvigilationMouseExited

    private void btnGenerateInvigilationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateInvigilationActionPerformed
       InvigilationListCreated invigilationListCreated = new InvigilationListCreated();
        invigilationListCreated.main(new String[]{});
        this.dispose();
    }//GEN-LAST:event_btnGenerateInvigilationActionPerformed

    private void btnGenerateSeatingMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGenerateSeatingMouseEntered
        btnGenerateSeating.setToolTipText("Generate Seating Arrangement");
        btnGenerateSeating.setBackground(new Color(24, 154, 180));
        btnGenerateSeating.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnGenerateSeatingMouseEntered

    private void btnGenerateSeatingMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGenerateSeatingMouseExited
        // TODO add your handling code here:
        btnGenerateSeating.setBackground(new Color(0, 128, 128));
        btnGenerateSeating.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnGenerateSeatingMouseExited

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnGenerateSeatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateSeatingActionPerformed
        SeatingArrangmentIn seatingArrangementin=new SeatingArrangmentIn();
        String semString=semester?"Endsem":"Midsem";
        seatingArrangementin.main(new String[]{semString});
        this.dispose();
    }//GEN-LAST:event_btnGenerateSeatingActionPerformed

    public void saveToExcel(String arr[][]) {
        int rows = jTable1.getRowCount();
        int cols = jTable1.getColumnCount();
        
        // workbook object
        XSSFWorkbook workbook = new XSSFWorkbook();

        // spreadsheet object
        XSSFSheet spreadsheet = workbook.createSheet(" Time table");

        // creating a row object
        XSSFRow row;
        // This data needs to be written (Object[])
        Map<String, Object[]> studentData = new TreeMap<String, Object[]>();
        if (semester) {
            // End sem
            studentData.put("1", new Object[]{"SLOT 1(1st and 2nd Year)", "SLOT 2(3rd and 4th Year)"});
            for (int i = 0; i < rows; i++) {
                studentData.put(String.valueOf(i+2), arr[i]);
            }
            Set<String> keyid = studentData.keySet();

            int rowid = 0;

            // writing the data into the sheets...
            for (String key : keyid) {
                row = spreadsheet.createRow(rowid++);
                Object[] objectArr = studentData.get(key);
                int cellid = 0;

                for (Object obj : objectArr) {
                    Cell cell = row.createCell(cellid++);
                    cell.setCellValue((String) obj);
                }
            }
            try (   
                    // .xlsx is the format for Excel Sheets...
                    // writing the workbook into the file...
                     FileOutputStream out = new FileOutputStream(new File("E:/ExamManagement/TimeTable.xlsx"))) {
                    workbook.write(out);
            }
            catch(Exception e){
                System.out.println(e.getMessage());
            }
        }
        else{
             // Mid Sem
            studentData.put("1", new Object[]{"SLOT 4(1stYear)", "SLOT 3(2ndYear)","SLOT 2(3rdYear)","SLOT 1(4th Year)"});
            for (int i = 0; i < rows; i++) {
                studentData.put(String.valueOf(i+2), arr[i]);
            }
            Set<String> keyid = studentData.keySet();

            int rowid = 0;

            // writing the data into the sheets...
            for (String key : keyid) {
                row = spreadsheet.createRow(rowid++);
                Object[] objectArr = studentData.get(key);
                int cellid = 0;

                for (Object obj : objectArr) {
                    Cell cell = row.createCell(cellid++);
                    cell.setCellValue((String) obj);
                }
            }
            try (
                    // .xlsx is the format for Excel Sheets...
                    // writing the workbook into the file...
                     FileOutputStream out = new FileOutputStream(new File("E:/ExamManagement/TimeTable.xlsx"))) {
                    workbook.write(out);
            }
            catch(Exception e){
                System.out.println(e.getMessage());
            }
        }

    }

   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateTimeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateTimeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateTimeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateTimeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CreateTimeTable timeTable = new CreateTimeTable();
                timeTable.setVisible(true);
               
                timeTable.getContentPane().setBackground(new Color(47, 79, 79));
                timeTable.setUpTable(args[0]);
            }
        });
    }

    public void setUpTable(String type) {
         request.setEnabled(false);
        ArrayList<String> firstYearArrayList = setEachYearTable(firstYearTableNameString, firstYearSubject);
        ArrayList<String> secondYearArrayList = setEachYearTable(secondYearTableNameString, secondYearTableSubject);
        ArrayList<String> thirdYearArrayList = setEachYearTable(thirdYearTableNameString, thirdYearTableSubject);
        ArrayList<String> fourthYeaArrayList = setEachYearTable(fourthYearTableNameString, fourthYearTableSubject);
        if (type.equalsIgnoreCase("Midsem")) {
            semester = false;
            DefaultTableModel model = new DefaultTableModel();
//            String headers[]={"SLOT 4","SLOT 3","SLOT 2","SLOT 1"};
//               model.setColumnIdentifiers(headers);

            model.addColumn("SLOT 4(1st Year)", firstYearArrayList.toArray());
            model.addColumn("SLOT 3(2nd Year)", secondYearArrayList.toArray());
            model.addColumn("SLOT 2(3rd Year)", thirdYearArrayList.toArray());
            model.addColumn("SLOT 1(4th Year)", fourthYeaArrayList.toArray());
            jTable1.setModel(model);
        } else {
            semester = true;
            DefaultTableModel model = new DefaultTableModel();
            ArrayList<String> columnArrayList = combineAlternate(firstYearArrayList, secondYearArrayList);
            ArrayList<String> columnArrayList2 = combineAlternate(thirdYearArrayList, fourthYeaArrayList);
            model.addColumn("SLOT 1(1st and 2nd Year)", columnArrayList.toArray());
            model.addColumn("SLOT 2(3rd and 4th Year)", columnArrayList2.toArray());
            jTable1.setModel(model);
        }
    }

    public ArrayList<String> combineAlternate(ArrayList<String> a, ArrayList<String> b) {
        ArrayList<String> combine = new ArrayList<>();
        int index = 0;
        int firstIndex = 0, secondIndex = 0;
        while (true) {
            if (firstIndex >= a.size() && secondIndex >= b.size()) {
                break;
            }
            if (firstIndex < a.size()) {
                combine.add(a.get(firstIndex));
                firstIndex++;
            }
            if (secondIndex < b.size()) {
                combine.add(b.get(secondIndex));
                secondIndex++;
            }
        }
        return combine;
    }

    public ArrayList<String> setEachYearTable(String tableNameString, String SubjectTableName) {
        Connection connection = CreateConnection.getInstance();
        Statement statement;

        try {
            statement = connection.createStatement();
            ResultSet rs = statement.executeQuery("Select * from " + SubjectTableName + ";");
            ArrayList<String> subjectsArrayList = new ArrayList<>();
            ArrayList<String> finalTableList = new ArrayList<>();
            ArrayList<Integer> visitedArrayList = new ArrayList<>();

            while (rs.next()) {
                System.out.println(rs.getString(1));
                subjectsArrayList.add(rs.getString(1));
            }
            for (int i = 0; i < subjectsArrayList.size(); i++) {
                visitedArrayList.add(0);
            }

            for (int index = 0; index < subjectsArrayList.size(); index++) {
                boolean flag = false;
                if (visitedArrayList.get(index) == 1) {
                    continue;
                }
                for (int i = index + 1; i < subjectsArrayList.size(); i++) {
                    if (visitedArrayList.get(i) == 1) {
                        continue;
                    }
                    String queryString = "Select f1." + subjectsArrayList.get(index) + " from " + tableNameString + " f1,"
                            + tableNameString + " f2 where f1." + subjectsArrayList.get(index)
                            + "= f2." + subjectsArrayList.get(i) + ";";
                    System.out.println(queryString);
                    ResultSet rs1 = statement.executeQuery(queryString);
                    if (!rs1.first()) {
                        visitedArrayList.set(i, 1);
                        finalTableList.add(subjectsArrayList.get(index) + "/" + subjectsArrayList.get(i));
                        flag = true;
                        break;
                    }
                }
                if (!flag) {
                    finalTableList.add(subjectsArrayList.get(index));
                }
                visitedArrayList.set(index, 1);
            }
            return finalTableList;

        } catch (SQLException ex) {
            Logger.getLogger(AddDocuments.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerateInvigilation;
    private javax.swing.JButton btnGenerateSeating;
    private javax.swing.JButton btncreateTimeTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton request;
    // End of variables declaration//GEN-END:variables
}
